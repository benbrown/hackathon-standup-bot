# BeginStandupUsage
- To begin a stand-up, say @standup begin inside a Team chat. I cannot start a new stand-up from inside a 1:1 chat.
- To begin a stand-up, say @standup start inside a Team chat. I'm unable to start a new stand-up via a 1:1 chat.

# BeginStandup
- Hey @{user}. This is the stand-up for @{teamName} / @{channelName}. Let's get started!

#  WorkingOnPastPrompt
- What have you been working on since yesterday?
- What have you been working on since last stand-up?
- What have you worked on since the last stand-up?

# WorkingOnNextPrompt
- What are you working on today?
- What will you be working on til our next stand-up?

# BlockerPrompt
- Is there anything blocking your progress?
- Are there any blockers?

# ThankUserForCompletion
- Thanks for taking the time to respond!

# PrepareStandUpCard
[Activity
    Attachments = @{json(PrepareStandUpCardJson())}
]

# PrepareStandUpCardJson
-```
{
    "type": "AdaptiveCard",
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "id": "PrepareStandUp",
    "version": "1.0",
    "body": [
        {
            "type": "TextBlock",
            "text": "Preparing a new stand-up meeting..."
        }
    ]
}
```

# StartStandUpCard
[Activity
    Attachments = @{json(StartStandUpCardJson())}
]

# StartStandUpCardJson
-```
{
    "type": "AdaptiveCard",
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "id": "StartStandUp",
    "version": "1.0",
    "body": [
        {
            "type": "TextBlock",
            "text": "It's time for a stand-up! Click the button below to start yours.",
            "wrap": true
        },
        {
            "type": "ActionSet",
            "actions": [
                {
                    "type": "Action.Submit",
                    "title": "Begin My Stand-up",
                    "id": "begin",
                    "data": {
                        "command": "begin",
                        "original_card": "@{cardId}"
                    }
                }
            ],
            "horizontalAlignment": "Center"
        }
    ]
}
```

# SummaryCard
[Activity
    Attachments = @{json(SummaryCardJson())}
]

# SummaryCardJson
-```
{
    "type": "AdaptiveCard",
    "version": "1.0",
    "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
    "id": "SummaryCard",
    "body": [
        {
            "id": "TitleContainer",
            "type": "Container",
            "items": [
                {
                    "type": "TextBlock",
                    "text": "Notes from @{meeting} in channel @{channel}",
                    "size": "Large",
                    "wrap": true,
                    "weight": "Bolder"
                }
            ]
        },
        {
            "id": "QuestionsContainer",
            "type": "Container",
            "items": [
                @{QuestionContainerCard(questions)}
            ]
        }
    ]
}
```

# QuestionContainerCard(questions)
- @{join(foreach(questions, x, QuestionCard(x)), ', ')}

# QuestionCard(question)
-```
{
    "type": "Container",
    "items": [
        {
            "type": "TextBlock",
            "text": "@{question.text}",
            "size": "Large",
            "weight": "Bolder"
        },
        {
            "id": "ParticipantsContainer",
            "type": "Container",
            "items": [
                @{ParticipantsContainerCard(question.participants)}
            ]
        }
    ]
}
```

# ParticipantsContainerCard(participants)
- @{join(foreach(participants, x, ParticipantsCard(x)), ', ')}

# ParticipantsCard(participant)
-```
{
    "type": "TextBlock",
    "text": "@{participant.name}",
    "color": "Accent",
    "size": "Large"
},
{
    "type": "TextBlock",
    "text": "@{participant.response}",
    "wrap": true
}
```